document
	= _ source:command_set { return source; }

// Command set (Top level document)
command_set
	= commands:command* {
		return commands.reduce(function(a,b) { return a.concat(b); }, []);
	}

command
	= directive
	/ ":" _ i:identifier { return { line: line, column: column, type: "label", name: i.toUpperCase() }; }
	/ i:identifier ":" _  { return { line: line, column: column, type: "label", name: i.toUpperCase() }; }
	/ op:word [ \t]+ args:expression_list { return { line: line, column: column, type: "operation", name: op.toUpperCase(), arguments: args }; }
	/ op:identifier { return { line: line, column: column, type: "operation", name: op.toUpperCase(), arguments: [] }; }

directive
	= procedure
	/ include
	/ macro
	/ data_block
	/ equate_directive
	/ directive:valid_directive value:expression { return { line: line, column: column, type: directive, value: value }; }
	
valid_directive
	= ".org"i _ { return "org"; }
	/ ".bss"i _ { return "bss"; }
	/ ".ds"i _ { return "bss"; }
	/ ".align"i _ { return "align"; }

equate_directive
	= ".equ"i _ name:identifier value:expression { return { line: line, column: column, type: "equate", name: name.toUpperCase(), value: value }; }

data_block
	= data_type:data_type args:expression_list {
		args = args.reduce(function(list, v) {
			if (v.type === "string") {
				v = v.value.split('').map(function(c) { 
					return { line: v.line, column: v.column, type: "number", value:c.charCodeAt(0) };
				});
			}
			return list.concat(v);
		}, []);

		var null_byte = {
			number: 0,
			type: 'number'
		}, remap = [],
		i;

		switch (data_type) {
			case 'little':
				for(i = 0; i < args.length; i += 2) {
					remap.push({
						type: "binary",
						operation: "#",
						left: args[i],
						right: args[i+1] || null_byte
					});
				}
				break ;
			case 'big':
				for(i = 0; i < args.length; i += 2) {
					remap.push({
						type: "binary",
						operation: "#",
						left: args[i+1] || null_byte,
						right: args[i]
					});
				}
				break ;
			default:
				remap = args;
				break;
		}

		return { line: line, column: column, type:'data', arguments: remap };
	}

data_type
	= "dat"i _ { return "word"; }
	/ ".data"i _ { return "word"; }
	/ ".dat"i _ { return "word"; }
	/ ".big"i _ { return "big"; }
	/ ".little"i _ { return "little"; }

include_types
	= ".include"i _ { return "include"; }
	/ ".incbytes"i _ { return "big"; }
	/ ".incbytes"i _ { return "little"; }
	/ ".incbytes"i _ { return "bytes"; }

include
	= include_type:include_types args:expression_list {
		args.forEach(function (f) {
			if (f.type !== 'string') {
				throw {
					name: "IncludeError",
					message: "Include requires a string argument",
					line: line,
					column: column
					};
			}
		});

		return {
			type: "include",
			format: include_type,
			column: column,
			line: line,
			arguments: args
		};
	}

macro 
	= ".macro"i _ name:identifier params:identifier_list commands:command_set ".end" _ { 
		return { line: line, column: column, type: "macro", name: name.toUpperCase(), parameters: params, contents: commands };
	}

// Auto-escape identifiers which have been wrapped in a proc block
procedure
	= ".proc"i _ commands:command_set ".end"i _ {
		return { line: line, column: column, type: "proc", contents: commands };
	}

// Collections
identifier_list
	= "(" _ ")" _ { return []; }
	/ "(" _ a:(identifier "," _)* b:identifier ")" _ { return a.map(function(g) { return g[0]; }).concat(b); }
	/ a:(identifier "," _)* b:identifier { return a.map(function(g) { return g[0]; }).concat(b); }

expression_list
	= a:(expression "," _)* b:expression { return a.map(function(g) { return g[0]; }).concat(b); }


// Expressions
expression
	= l:short_exp op:binary_op _ r:expression { return { line: line, column: column, type: "unordered", operation: op, left: l, right: r } }
	/ short_exp

short_exp
	= n:number { return { line: line, column: column, weight: 1, type: "number", value:n } }
	/ s:string { return { line: line, column: column, type: "string", value:s } }
	/ c:character { return { line: line, column: column, weight: 1, type: "number", value:c } }
	/ "peek"i _ e:expression { 
		return { 
			line: line, 
			column: column,
			type: "indirect",
			value: {
				line: line, 
				column: column,
				type: "binary",
				operation: "+",
				left: { type: "register", name: "SP" },
				right: e
			}
		}; 
	}
	/ r:register ![_a-z0-9]i _ { return { line: line, column: column, weight: 3, type: "register", name:r } }
	/ i:identifier { return { line: line, column: column, weight: 2, type: "identifier", name:i.toUpperCase() } }
	/ "(" _ o:expression ")" _ { return { line: line, column: column, type: "paren", value: o }; }
	/ "[" _ e:expression "]" _ { return { line: line, column: column, type: "indirect", value: e } }
	/ op:unary_op _ t:short_exp { return { line: line, column: column, type: "unary", operation: op, value: t } }

// Operators
binary_op
	= op:"+"  { return { line: line, column: column, operation: op, priority: 5, reorder: "full" }; }
	/ op:"-"  { return { line: line, column: column, operation: op, priority: 5, inverse: "+", reorder: "partial" }; }
	/ op:"/"  { return { line: line, column: column, operation: op, priority: 6, inverse: "*", reorder: "partial" }; }
	/ op:"*"  { return { line: line, column: column, operation: op, priority: 6, reorder: "full" }; }
	/ op:"%"  { return { line: line, column: column, operation: op, priority: 6 }; }
	/ op:">>>" { return { line: line, column: column, operation: op, priority: 3 }; }
	/ op:">>" { return { line: line, column: column, operation: op, priority: 3 }; }
	/ op:"<<" { return { line: line, column: column, operation: op, priority: 3 }; }
	/ op:"||" { return { line: line, column: column, operation: op, priority: 2 }; }
	/ op:"&&" { return { line: line, column: column, operation: op, priority: 1 }; }
	/ op:"^"  { return { line: line, column: column, operation: op, priority: 4, reorder: "full" }; }
	/ op:"|"  { return { line: line, column: column, operation: op, priority: 4, reorder: "full" }; }
	/ op:"&"  { return { line: line, column: column, operation: op, priority: 4, reorder: "full" }; }
	/ op:"#"  { return { line: line, column: column, operation: op, priority: 4 }; }

unary_op
	= "-"
	/ "~"
	/ "&"

// Primitive values
string
	= '"' s:string_char* '"' _ { return s.join(""); }

string_char
	= [^"\\\n\r]
	/ "\\n" { return "\n"; }
	/ "\\r" { return "\r"; }
	/ "\\t" { return "\t"; }
	/ "\\b" { return "\b"; }
	/ "\\f" { return "\f"; }
	/ "\\\\" { return "\\"; }
	/ "\\x" v:[0-9a-f]i+ { return String.fromCharCode(parseInt(v, 16)); }
	/ "\\u" v:[0-9a-f]i+ { return String.fromCharCode(parseInt(v, 16)); }

character
	= "'" v:. "'" _ { return v.charCodeAt(0); }

number
	= "0x"i v:[0-9a-f]i+ _ { return parseInt(v.join(''), 16); }
	/ "0b"i v:[0-9a-f]i+ _ { return parseInt(v.join(''), 2); }
	/ "0"i v:[0-7]i+ _ { return parseInt(v.join(''), 8); }
	/ "0" _ { return 0; }
	/ "$" v:[0-9a-f]i+ _ { return parseInt(v.join(''), 16); }
	/ v:[0-9]+ _ { return parseInt(v.join(''), 10); }

register
	= "a"i { return "A"; }
	/ "b"i { return "B"; }
	/ "c"i { return "C"; }
	/ "x"i { return "X"; }
	/ "y"i { return "Y"; }
	/ "z"i { return "Z"; }
	/ "i"i { return "I"; }
	/ "j"i { return "J"; }
	/ "pc"i { return "PC"; }
	/ "sp"i { return "SP"; }
	/ "ex"i { return "EX"; }
	/ "[" _ "--" _ "sp"i _ "]" { return "PUSH"; }
	/ "push"i { return "PUSH"; }
	/ "[" _ "sp"i _ "++" _ "]" { return "POP"; }
	/ "pop"i { return "POP"; }

identifier
	= word:word _ { return word; }

word
	= a:[_a-z]i b:[_a-z0-9]i* { return a + b.join(""); }

// Whitespace and Comments
_ 
	= whitespace* { return { line: line, column: column, type: "whitespace" }; }

whitespace
	= [\n\r\t ]+
	/ "/*" multiline_comment* "*/"
	/ "//" [^\n\r]*
	/ ";" [^\n\r]*

multiline_comment
	= [^*]
	/ "*" &[^/]
